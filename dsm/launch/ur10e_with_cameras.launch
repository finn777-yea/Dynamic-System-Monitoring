<launch>
  <!--Robot description and related parameter files -->
  <arg name="robot_description_file" default="$(find dsm)/launch/load_ur10e_with_cams.launch.xml" doc="Launch file which populates the 'robot_description' parameter."/>
  <arg name="joint_limit_params" default="$(find ur_description)/config/ur10e/joint_limits.yaml"/>
  <arg name="kinematics_params" default="$(find ur_description)/config/ur10e/default_kinematics.yaml"/>
  <arg name="physical_params" default="$(find ur_description)/config/ur10e/physical_parameters.yaml"/>
  <arg name="visual_params" default="$(find ur_description)/config/ur10e/visual_parameters.yaml"/>
 
  <!-- Robot state publisher -->
  <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" />
  </node>

 <!-- Load urdf on the parameter server -->
  <include file="$(arg robot_description_file)">
    <arg name="joint_limit_params" value="$(arg joint_limit_params)"/>
    <arg name="kinematics_params" value="$(arg kinematics_params)"/>
    <arg name="physical_params" value="$(arg physical_params)"/>
    <arg name="visual_params" value="$(arg visual_params)"/>
  </include>

  <!-- Controller configuration -->
  <arg name="controller_config_file" default="$(find ur_gazebo)/config/ur10e_controllers.yaml" doc="Config file used for defining the ROS-Control controllers."/>
  <arg name="controllers" default="pos_joint_traj_controller joint_state_controller scaled_pos_joint_traj_controller " doc="Controllers that are activated by default."/>
  <arg name="stopped_controllers" default="scaled_pos_joint_traj_controller" doc="Controllers that are initally loaded, but not started."/>
  
  <!-- Start the 'driver' (ie: Gazebo in this case) -->
  <include file="$(find dsm)/launch/gazebo.launch">
    <arg name="controller_config_file" value="$(arg controller_config_file)"/>
    <arg name="controllers" value="$(arg controllers)"/>
    <arg name="gui" value="false"/>
    <arg name="paused" value="false"/>
    <arg name="stopped_controllers" value="$(arg stopped_controllers)"/>
  </include>

  <node pkg="dsm" type="compute_aabbs_node" name="compute_aabbs_node" output="screen"/>
    
  <node pkg="dsm" type="point_cloud_processor_node" name="point_cloud_processor_node" output="screen"/>
    
  <!-- default rviz-config: $(find dsm)/rviz/urdf.rviz -->
  <node name="rviz" pkg="rviz" type="rviz" args="-d $(find dsm)/rviz/ur10e_scene_monitoring.rviz" required="true" />

  <!-- Start octomap_server_node for voxelization -->
  <node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
	<param name="resolution" value="0.03" />
	<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
	<param name="frame_id" type="string" value="world" />
	<!-- maximum range to integrate (speedup!) -->
	<param name="sensor_model/max_range" value="5.0" />
	<!-- data source to integrate (PointCloud2) -->
	<remap from="cloud_in" to="/filtered_pointcloud" />
	</node>


</launch>